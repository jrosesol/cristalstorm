/**
 * 
 */
package com.cristal.storm.prototype.server.action;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

import com.cristal.storm.prototype.client.controller.DataStoreProxy;
import com.cristal.storm.prototype.shared.FieldVerifier;
import com.cristal.storm.prototype.shared.action.SendMceToServer;
import com.cristal.storm.prototype.shared.action.SendMceToServerResult;
import com.cristal.storm.prototype.shared.action.SendTextToServer;
import com.cristal.storm.prototype.shared.action.SendTextToServerResult;
import com.cristal.storm.prototype.shared.domain.MceDto;
import com.google.inject.Inject;
import com.google.inject.Provider;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import com.gwtplatform.dispatch.server.ExecutionContext;
import com.gwtplatform.dispatch.server.actionhandler.ActionHandler;
import com.gwtplatform.dispatch.shared.ActionException;


/**
 * @author Admin
 * 
 */
public class SendMceToServerHandler implements
        ActionHandler<SendMceToServer, SendMceToServerResult> {

    private Provider<HttpServletRequest> requestProvider;
    private ServletContext servletContext;    

    // Define a static logger variable so that it references the Logger
    static Logger logger = Logger.getLogger(DataStoreProxy.class);
    
    @Inject
    SendMceToServerHandler(ServletContext servletContext,
            Provider<HttpServletRequest> requestProvider) {
        this.servletContext = servletContext;
        this.requestProvider = requestProvider;
    }
    
    static {
        ObjectifyService.register(Mce.class);
    }

    /* (non-Javadoc)
     * @see com.gwtplatform.dispatch.server.actionhandler.ActionHandler#execute(com.gwtplatform.dispatch.shared.Action, com.gwtplatform.dispatch.server.ExecutionContext)
     */
    @Override
    public SendMceToServerResult execute(SendMceToServer action,
            ExecutionContext context) throws ActionException {
        
        Objectify ofy = ObjectifyService.begin();

         // Simple create
         Mce porsche = new Mce(action.getMceToServer().uri, action.getMceToServer().tag.toString());
         ofy.put(porsche);
         assert porsche.id != null;    // id was autogenerated
    
         // Get it back
         Mce fetched1 = ofy.get(new Key<Mce>(Mce.class, porsche.id));
         //Mce fetched2 = ofy.get(Mce.class, porsche.id);    // equivalent, more convenient
    
         // Change some data and write it
         //porsche.color = "blue";
         //ofy.put(porsche);
    
         // Delete it
         //ofy.delete(porsche);
        
        return new SendMceToServerResult(new MceDto(fetched1.uri, fetched1.tag));
    }

    @Override
    public Class<SendMceToServer> getActionType() {
        return SendMceToServer.class;
    }

    @Override
    public void undo(SendMceToServer action, SendMceToServerResult result,
            ExecutionContext context) throws ActionException {
        // Not undoable
    }
}
